// represents the whole program
program = { SOI ~ statement* ~ EOI }
// statements can be either have a terminator or not, depending on what you doing
statement           = { statement_with_term }
statement_with_term = { (var_var | func_call) ~ term }

term = { "!"+ }

var_var        = ${ "var var" ~ ws+ ~ identifier ~ ws+ ~ "=" ~ ws+ ~ expression }
func_call      = ${ identifier ~ func_call_args? }
func_call_args = ${ ws+ ~ expression ~ (ws* ~ "," ~ ws* ~ expression)* }

// contains all the different types of expressions
expression = { comp_expr | var_or_value_or_func }
// comparison expressions compares two expressions
comp_expr = ${ var_or_value_or_func ~ ws+ ~ comp_op ~ ws+ ~ var_or_value_or_func }
comp_op   =  { comp_eq | comp_ne | comp_le | comp_ge | comp_lt | comp_gt }
comp_eq   =  { "==" }
comp_ne   =  { "!=" }
comp_le   =  { "<=" }
comp_ge   =  { ">=" }
comp_lt   =  { "<" }
comp_gt   =  { ">" }

// because we can define a variable with the same name as an integer, and we also can't tell if its a function without arguments
var_or_value_or_func = { identifier }

identifier = { ASCII_ALPHANUMERIC+ }

ws         = _{ " " | "\t" | "\n" | "\r" | "(" | ")" }
WHITESPACE = _{ ws }
